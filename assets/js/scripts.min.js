+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
        return false;
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) this.$parent = $(this.options.parent);
        if (this.options.toggle) this.toggle();
    };
    Collapse.DEFAULTS = {
        toggle: true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) return;
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data && options.toggle && option == "show") option = !option;
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed");
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        }
        $target.collapse(option);
    });
}(jQuery);

$(document).ready(function() {
    function toggleMinusPlus(e) {
        $(e.target).siblings(".faq-heading").find(".oi").toggleClass("oi-plus oi-minus");
        console.log("clicked");
    }
    $("#accordion").on("hide.bs.collapse", toggleMinusPlus);
    $("#accordion").on("show.bs.collapse", toggleMinusPlus);
});

$("article").flowtype({
    minimum: 320,
    maximum: 1200,
    minFont: 14,
    maxFont: 40,
    fontRatio: 45
});

$("#accordion").flowtype({
    minimum: 320,
    maximum: 1200,
    minFont: 13,
    maxFont: 40,
    fontRatio: 65
});

$(".oi").flowtype({
    minimum: 320,
    maximum: 1200,
    minFont: 13,
    maxFont: 40,
    fontRatio: 75
});

$("#info-bar").flowtype({
    minimum: 320,
    maximum: 1200,
    minFont: 12,
    maxFont: 40,
    fontRatio: 50
});

$(document).ready(function() {
    var $gallery = $(".gallery");
    var $holder = $(".holder");
    var $leftControl = $(".control-left");
    var $rightControl = $(".control-right");
    var $this = $(this);
    var $holderScrollPosition;
    var holderWidth;
    var distance;
    var scrollGallery = function() {
        var distance;
        function scrollDistance() {
            var holderWidth = $holder.width();
            var $holderScrollPosition = $holder.scrollLeft();
            if ($holderScrollPosition < holderWidth) {
                distance = holderWidth;
            } else {
                distance = $holderScrollPosition + holderWidth;
            }
        }
        return {
            left: function() {
                var holderWidth = $holder.width();
                var $holderScrollPosition = $holder.scrollLeft();
                distance = $holderScrollPosition - holderWidth;
                $holder.animate({
                    scrollLeft: distance
                }, 300);
                return;
            },
            right: function() {
                scrollDistance();
                $holder.animate({
                    scrollLeft: distance
                }, 300);
                return;
            }
        };
    }();
    $leftControl.click(function() {
        console.log("left-clicked");
        scrollGallery.left();
    });
    $rightControl.click(function() {
        console.log("right-clicked");
        scrollGallery.right();
    });
});

(function($, window, i) {
    $.fn.responsiveSlides = function(options) {
        var settings = $.extend({
            auto: true,
            speed: 500,
            timeout: 4e3,
            pager: false,
            nav: false,
            random: false,
            pause: false,
            pauseControls: true,
            prevText: "Previous",
            nextText: "Next",
            maxwidth: "",
            navContainer: "",
            manualControls: "",
            namespace: "rslides",
            before: $.noop,
            after: $.noop
        }, options);
        return this.each(function() {
            i++;
            var $this = $(this), vendor, selectTab, startCycle, restartCycle, rotate, $tabs, index = 0, $slide = $this.children(), length = $slide.size(), fadeTime = parseFloat(settings.speed), waitTime = parseFloat(settings.timeout), maxw = parseFloat(settings.maxwidth), namespace = settings.namespace, namespaceIdx = namespace + i, navClass = namespace + "_nav " + namespaceIdx + "_nav", activeClass = namespace + "_here", visibleClass = namespaceIdx + "_on", slideClassPrefix = namespaceIdx + "_s", $pager = $("<ul class='" + namespace + "_tabs " + namespaceIdx + "_tabs' />"), visible = {
                "float": "left",
                position: "relative",
                opacity: 1,
                zIndex: 2
            }, hidden = {
                "float": "none",
                position: "absolute",
                opacity: 0,
                zIndex: 1
            }, supportsTransitions = function() {
                var docBody = document.body || document.documentElement;
                var styles = docBody.style;
                var prop = "transition";
                if (typeof styles[prop] === "string") {
                    return true;
                }
                vendor = [ "Moz", "Webkit", "Khtml", "O", "ms" ];
                prop = prop.charAt(0).toUpperCase() + prop.substr(1);
                var i;
                for (i = 0; i < vendor.length; i++) {
                    if (typeof styles[vendor[i] + prop] === "string") {
                        return true;
                    }
                }
                return false;
            }(), slideTo = function(idx) {
                settings.before(idx);
                if (supportsTransitions) {
                    $slide.removeClass(visibleClass).css(hidden).eq(idx).addClass(visibleClass).css(visible);
                    index = idx;
                    setTimeout(function() {
                        settings.after(idx);
                    }, fadeTime);
                } else {
                    $slide.stop().fadeOut(fadeTime, function() {
                        $(this).removeClass(visibleClass).css(hidden).css("opacity", 1);
                    }).eq(idx).fadeIn(fadeTime, function() {
                        $(this).addClass(visibleClass).css(visible);
                        settings.after(idx);
                        index = idx;
                    });
                }
            };
            if (settings.random) {
                $slide.sort(function() {
                    return Math.round(Math.random()) - .5;
                });
                $this.empty().append($slide);
            }
            $slide.each(function(i) {
                this.id = slideClassPrefix + i;
            });
            $this.addClass(namespace + " " + namespaceIdx);
            if (options && options.maxwidth) {
                $this.css("max-width", maxw);
            }
            $slide.hide().css(hidden).eq(0).addClass(visibleClass).css(visible).show();
            if (supportsTransitions) {
                $slide.show().css({
                    "-webkit-transition": "opacity " + fadeTime + "ms ease-in-out",
                    "-moz-transition": "opacity " + fadeTime + "ms ease-in-out",
                    "-o-transition": "opacity " + fadeTime + "ms ease-in-out",
                    transition: "opacity " + fadeTime + "ms ease-in-out"
                });
            }
            if ($slide.size() > 1) {
                if (waitTime < fadeTime + 100) {
                    return;
                }
                if (settings.pager && !settings.manualControls) {
                    var tabMarkup = [];
                    $slide.each(function(i) {
                        var n = i + 1;
                        tabMarkup += "<li>" + "<a href='#' class='" + slideClassPrefix + n + "'>" + n + "</a>" + "</li>";
                    });
                    $pager.append(tabMarkup);
                    if (options.navContainer) {
                        $(settings.navContainer).append($pager);
                    } else {
                        $this.after($pager);
                    }
                }
                if (settings.manualControls) {
                    $pager = $(settings.manualControls);
                    $pager.addClass(namespace + "_tabs " + namespaceIdx + "_tabs");
                }
                if (settings.pager || settings.manualControls) {
                    $pager.find("li").each(function(i) {
                        $(this).addClass(slideClassPrefix + (i + 1));
                    });
                }
                if (settings.pager || settings.manualControls) {
                    $tabs = $pager.find("a");
                    selectTab = function(idx) {
                        $tabs.closest("li").removeClass(activeClass).eq(idx).addClass(activeClass);
                    };
                }
                if (settings.auto) {
                    startCycle = function() {
                        rotate = setInterval(function() {
                            $slide.stop(true, true);
                            var idx = index + 1 < length ? index + 1 : 0;
                            if (settings.pager || settings.manualControls) {
                                selectTab(idx);
                            }
                            slideTo(idx);
                        }, waitTime);
                    };
                    startCycle();
                }
                restartCycle = function() {
                    if (settings.auto) {
                        clearInterval(rotate);
                        startCycle();
                    }
                };
                if (settings.pause) {
                    $this.hover(function() {
                        clearInterval(rotate);
                    }, function() {
                        restartCycle();
                    });
                }
                if (settings.pager || settings.manualControls) {
                    $tabs.bind("click", function(e) {
                        e.preventDefault();
                        if (!settings.pauseControls) {
                            restartCycle();
                        }
                        var idx = $tabs.index(this);
                        if (index === idx || $("." + visibleClass).queue("fx").length) {
                            return;
                        }
                        selectTab(idx);
                        slideTo(idx);
                    }).eq(0).closest("li").addClass(activeClass);
                    if (settings.pauseControls) {
                        $tabs.hover(function() {
                            clearInterval(rotate);
                        }, function() {
                            restartCycle();
                        });
                    }
                }
                if (settings.nav) {
                    var navMarkup = "<a href='#' class='" + navClass + " prev'>" + settings.prevText + "</a>" + "<a href='#' class='" + navClass + " next'>" + settings.nextText + "</a>";
                    if (options.navContainer) {
                        $(settings.navContainer).append(navMarkup);
                    } else {
                        $this.after(navMarkup);
                    }
                    var $trigger = $("." + namespaceIdx + "_nav"), $prev = $trigger.filter(".prev");
                    $trigger.bind("click", function(e) {
                        e.preventDefault();
                        var $visibleClass = $("." + visibleClass);
                        if ($visibleClass.queue("fx").length) {
                            return;
                        }
                        var idx = $slide.index($visibleClass), prevIdx = idx - 1, nextIdx = idx + 1 < length ? index + 1 : 0;
                        slideTo($(this)[0] === $prev[0] ? prevIdx : nextIdx);
                        if (settings.pager || settings.manualControls) {
                            selectTab($(this)[0] === $prev[0] ? prevIdx : nextIdx);
                        }
                        if (!settings.pauseControls) {
                            restartCycle();
                        }
                    });
                    if (settings.pauseControls) {
                        $trigger.hover(function() {
                            clearInterval(rotate);
                        }, function() {
                            restartCycle();
                        });
                    }
                }
            }
            if (typeof document.body.style.maxWidth === "undefined" && options.maxwidth) {
                var widthSupport = function() {
                    $this.css("width", "100%");
                    if ($this.width() > maxw) {
                        $this.css("width", maxw);
                    }
                };
                widthSupport();
                $(window).bind("resize", function() {
                    widthSupport();
                });
            }
        });
    };
})(jQuery, this, 0);

(function($) {
    var Roots = {
        common: {
            init: function() {}
        },
        home: {
            init: function() {
                $(".rslides").responsiveSlides({
                    auto: true,
                    speed: 700,
                    timeout: 3e3,
                    pager: false,
                    nav: false,
                    random: false,
                    pause: true,
                    pauseControls: true,
                    prevText: "Previous",
                    nextText: "Next",
                    maxwidth: "475",
                    navContainer: "",
                    manualControls: "",
                    namespace: "rslides",
                    before: function() {},
                    after: function() {}
                });
                $(".link-button .disabled").click(function(event) {
                    event.preventDefault();
                });
            }
        },
        about_us: {
            init: function() {}
        },
        seattle: {
            init: function() {
                var SW = L.latLng(47.6430704492123, -122.334308624268);
                var NE = L.latLng(47.6774957780179, -122.274227142334);
                var bounds = L.latLngBounds(SW, NE);
                var clientWidth = $(window).width();
                var map = L.mapbox.map("map", "bperick.ilp0kaof", {
                    tileLayer: {
                        detectRetina: true
                    },
                    maxBounds: bounds,
                    minZoom: 15,
                    scrollWheelZoom: false,
                    doubleClickZoom: false,
                    tap: false
                });
                if (clientWidth < 480) {
                    map.setView([ 47.657, -122.308 ], 16);
                } else {
                    map.setView([ 47.656, -122.3095 ], 16);
                }
                var course_ui = document.getElementById("course-ui");
                map.featureLayer.on("ready", function() {
                    var typesObj = {};
                    var types = [];
                    var features = map.featureLayer.getGeoJSON().features;
                    for (var i = 0; i < features.length; i++) {
                        typesObj[features[i].properties.title] = true;
                    }
                    for (var k in typesObj) {
                        types.push(k);
                    }
                    var checkboxes = [];
                    function update() {
                        var enabled = {};
                        for (var i = 0; i < checkboxes.length; i++) {
                            if (checkboxes[i].checked) {
                                enabled[checkboxes[i].id] = true;
                            }
                        }
                        map.featureLayer.setFilter(function(feature) {
                            return feature.properties.title in enabled;
                        });
                    }
                    for (var ii = 0; ii < types.length; ii++) {
                        var item = course_ui.appendChild(document.createElement("div"));
                        var checkbox = item.appendChild(document.createElement("input"));
                        var label = item.appendChild(document.createElement("label"));
                        checkbox.type = "checkbox";
                        checkbox.id = types[ii];
                        checkbox.checked = true;
                        item.className = "active ui_menu_box";
                        label.innerHTML = types[ii];
                        label.setAttribute("for", types[ii]);
                        checkboxes.push(checkbox);
                    }
                    function toggleAndCheck() {
                        $(this).toggleClass("active");
                    }
                    function justToggle() {
                        $(this).parent("div").toggleClass("active");
                        return false;
                    }
                    function checkCheck() {
                        var $this = $(this);
                        var isChecked = $(this).find("input").prop("checked");
                        if (isChecked === true) {
                            setTimeout(function() {
                                $this.find("input").prop("checked", false).blur();
                                update();
                            }, 10);
                        } else if (isChecked === false) {
                            setTimeout(function() {
                                $this.find("input").prop("checked", true).blur();
                                update();
                            }, 10);
                        }
                    }
                    function bindUI() {
                        $("#course-ui").on("tap", ".ui_menu_box", toggleAndCheck).on("tap", "label", justToggle).on("touchend mouseup", ".ui_menu_box", checkCheck);
                    }
                    function unBindUI() {
                        $("#course-ui").off("tap", ".ui_menu_box").off("tap", "label").off("touchend mouseup", ".ui_menu_box");
                    }
                    map.on("move", unBindUI);
                    map.on("moveend", bindUI);
                    bindUI();
                });
            }
        }
    };
    var UTIL = {
        fire: function(func, funcname, args) {
            var namespace = Roots;
            funcname = funcname === undefined ? "init" : funcname;
            if (func !== "" && namespace[func] && typeof namespace[func][funcname] === "function") {
                namespace[func][funcname](args);
            }
        },
        loadEvents: function() {
            UTIL.fire("common");
            $.each(document.body.className.replace(/-/g, "_").split(/\s+/), function(i, classnm) {
                UTIL.fire(classnm);
            });
        }
    };
    $(document).ready(UTIL.loadEvents);
})(jQuery);

$(document).ready(function() {
    $("#scrolltop").on("tap", function() {
        $("body, html").animate({
            scrollTop: 0
        }, 300);
    });
});

(function(w, $, undefined) {
    w.tapHandling = false;
    var tap = function($els) {
        return $els.each(function() {
            var $el = $(this), resetTimer, startY, startX, cancel, scrollTolerance = 10;
            function trigger(e) {
                $(e.target).trigger("tap", [ e, $(e.target).attr("href") ]);
                e.stopImmediatePropagation();
            }
            function getCoords(e) {
                var ev = e.originalEvent || e, touches = ev.touches || ev.targetTouches;
                if (touches) {
                    return [ touches[0].pageX, touches[0].pageY ];
                } else {
                    return null;
                }
            }
            function start(e) {
                if (e.touches && e.touches.length > 1 || e.targetTouches && e.targetTouches.length > 1) {
                    return false;
                }
                var coords = getCoords(e);
                startX = coords[0];
                startY = coords[1];
            }
            function move(e) {
                if (!cancel) {
                    var coords = getCoords(e);
                    if (coords && (Math.abs(startY - coords[1]) > scrollTolerance || Math.abs(startX - coords[0]) > scrollTolerance)) {
                        cancel = true;
                    }
                }
            }
            function end(e) {
                clearTimeout(resetTimer);
                resetTimer = setTimeout(function() {
                    w.tapHandling = false;
                    cancel = false;
                }, 1e3);
                if (e.ctrlKey || e.metaKey) {
                    return;
                }
                e.preventDefault();
                if (cancel || w.tapHandling && w.tapHandling !== e.type) {
                    cancel = false;
                    return;
                }
                w.tapHandling = e.type;
                trigger(e);
            }
            $el.bind("touchstart MSPointerDown pointerdown", start).bind("touchmove MSPointerMove pointerup", move).bind("touchend MSPointerUp pointerup", end).bind("click", end);
        });
    };
    if ($.event && $.event.special) {
        $.event.special.tap = {
            add: function(handleObj) {
                tap($(this), true);
            },
            remove: function(handleObj) {
                tap($(this), false);
            }
        };
    } else {
        var oldBind = $.fn.bind;
        $.fn.bind = function(evt) {
            if (/(^| )tap( |$)/.test(evt)) {
                tap(this);
            }
            return oldBind.apply(this, arguments);
        };
    }
})(this, jQuery);

$(document).ready(function() {
    var $thin = $("#thin-strip"), strip = $thin.clone().removeAttr("style").addClass("thin-fixed"), search = $("#search form"), win = $(window), bod = $("body");
    bod.append(strip.hide());
    strip.data("otop", bod.hasClass("top"));
    win.bind("scroll", function() {
        var top = $(this).scrollTop(), pos = bod.hasClass("admin-bar") ? 28 : 0, adjust = bod.data("alert-height") || pos, $mini = $("#alert-mini");
        if ($(this).width() < 768) {
            return false;
        }
        if (top < 180 + adjust) {
            strip.css("top", -28).hide().data("showing", false);
            $mini.hide();
        }
        if (top > 220 + adjust && !strip.data("showing")) {
            strip.show().animate({
                top: strip.data("otop") + pos
            }, {
                duration: 300,
                easing: "swing"
            }).data("showing", true);
        }
        if ($mini.length !== 0 && !bod.data("scrolling")) {
            if (top < 300 + adjust) {
                $mini.slideUp();
            }
            if (top > 330 + adjust) {
                $mini.slideDown();
            }
        }
    });
});

$(document).ready(function() {
    var data = {
        q: "http://www.atmos.washington.edu/rss/home.rss",
        v: "2.0"
    };
    $.ajax({
        url: "https://ajax.googleapis.com/ajax/services/feed/load?callback=?",
        dataType: "jsonp",
        data: data,
        success: function(json) {
            var icon = $.trim(json.responseData.feed.entries[2].title.split("|")[1]), weat = $.trim(json.responseData.feed.entries[1].title.split("|")[1]), temp = $.trim(json.responseData.feed.entries[0].title.split("|")[1]), html = '<li class="header-weather"><a href="http://www.atmos.washington.edu/weather/forecast/" title="Forecast is ' + weat + '">';
            html += '<img src="//www.washington.edu/news/wp-content/themes/uw/img/weather/top-nav/' + icon + '.png" alt="Forecast is ' + weat + '"/>';
            html += "</a></li>";
            html += '<li class="header-forcast"><a href="http://www.atmos.washington.edu/weather/forecast/">';
            html += "Seattle " + temp;
            html += "</a></li>";
            $("#thin-strip").find("ul").append(html);
        }
    });
});